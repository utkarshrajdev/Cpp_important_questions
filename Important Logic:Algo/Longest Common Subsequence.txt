class Solution {
public:
    int common(string &text1, string &text2,int t1, int t2,vector<vector<int>> &dp)
    {
        if(t1<0 || t2<0) return 0;
        if(dp[t1][t2]!=-1) return dp[t1][t2];
        if(text1[t1]==text2[t2])
        {
            return dp[t1][t2]=common(text1,text2,t1-1,t2-1,dp)+1;
        }
        else
        {
            return dp[t1][t2]=max(common(text1,text2,t1-1,t2,dp),common(text1,text2,t1,t2-1,dp));
        }
    }
    int longestCommonSubsequence(string text1, string text2) {
        int t1=text1.length(),t2=text2.length();
        vector<vector<int>> dp(t1+1, vector<int>(t2+1, 0));

        for (int i = 1; i <= t1; i++) {
            for (int j = 1; j <= t2; j++) {
                if (text1[i-1] == text2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[t1][t2];
        
    }
};
